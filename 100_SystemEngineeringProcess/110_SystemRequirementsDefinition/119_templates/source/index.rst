.. test documentation master file, created by
   sphinx-quickstart on Mon Nov 28 17:18:29 2016.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.

xxx システム要求仕様書
================================================

.. list-table::

  * - Version
    - |release|
  * - Last Update
    - |today|
  * - Author
    - Saburo Takahashi


変更履歴
================================================

==== ============ ========== ======================== ================
No.  日付         バージョン 改定内容                 変更者
==== ============ ========== ======================== ================
1    2016/12/01   0.0.1      新規作成                 Saburo Takahashi
2
3
4
5
6
7
8
9
10
==== ============ ========== ======================== ================


目次
================================================

.. toctree::
   :maxdepth: 2
   :numbered:
   :glob:

   index


1. 概要
==================

1.1. 目的
------------------

本書は人との xxx のシステム要求を定義する．


1.2. 位置づけ
------------------

本書はシステムアーキテクチャ設計書のインプット資料となる文書である．
また，システム安全要求仕様書およびシステムテスト設計書作成のためにも参照される．


1.3. 対象ユーザ
------------------

* システム発注者およびその関係者
* システムアーキテクチャ設計者
* システム安全要求分析者
* システムテスト設計者


1.4. 記載範囲
------------------

* システム概要
* システム構成
* 機能概要
* 制約条件
* ユースケース
* 機能詳細
* 非機能要求詳細

1.5. 参照ドキュメント
---------------------

=================================== ============================================================
名称                                パス/URL
=================================== ============================================================
xxx                                  http://xxx.com
=================================== ============================================================


2. システム構成
==================

2.1. システム全体構成
---------------------

.. ＊ハードウェアとソフトウェアを含むシステム全体構成をブロック図などで整理し、システムの動作環境や外部環境も含めてシステムの位置づけを明確にする


2.2. システムを構成する主たる要素
---------------------------------

.. ＊2.1で整理したシステムの構成要素の概要を一覧表などでまとめる

============== ============== ================================================
名称           Name           役割
============== ============== ================================================
管理者         Administrator  システムの起動，終了および製品リストの設定を行う
協働作業者     Collaborator   安全確保の必要なシステム周辺での作業者
ロボットアーム Robot Arm      アーム型ロボット
============== ============== ================================================


3. 機能概要
==================

.. ＊システムとして実現する機能の概要などを簡潔に整理する

開始・終了
----------


物体把持・格納
--------------


その他
------


4. 制約条件
==================


4.1. ハードウェアなどを含めたシステム全体の構成と制約
-----------------------------------------------------

.. ＊製品の動作環境、保守方法、準拠規約などの制約条件を整理する
.. ・製品開発に割くことのできる期間や開発コスト
.. ・製品の耐用年数や製品寿命
.. ・製品に期待される品質 （信頼性，安全性，使い勝手 など）
.. ・既存製品仕様との継続性に関する制約
.. ・既存システムの再利用に関する制約
.. ・セキュリティ、環境問題に関する制約
.. ・システムの利用などに付随する法的な制約，社会慣習面での制約
.. ・他社などの知的財産権，他社技術などとの関係



4.2. 周辺システム、利用するハードウェアおよびソフトウェア
---------------------------------------------------------

.. ＊製品を利用する上で前提として利用されるシステム、ハードウェア（周辺システムやハードウェア等）、ソフトウェア（OS、ミドルウェア等）があれば整理する。

================== ==================== ==========
種類               名称                 バージョン
================== ==================== ==========
コントローラOS     Windows              10
================== ==================== ==========


5. ユースケースとユースケース・シナリオ
=======================================

.. ＊製品の利用シーンや利用コンテキストをもとにしたユースケースとユースケースシナリオを整理する


6. 機能詳細
================================

.. ＊ユースケースを実現する機能について整理する



7. 性能・品質等非機能要求詳細
================================

7.1. 信頼性に関する要求
--------------------------------

.. ＊システムの異常時の処理なども考慮して整理する
..   - システムの異常処理方式
..   - システムの異常動作モードからの復帰手順や復帰方式


7.2. 使用性に関する要求
--------------------------------

.. ＊ユーザインタフェースの操作性、レスポンスなども考慮して整理する


7.3. 効率性に関する要求
--------------------------------

.. ＊システムの効率性に関する要求を整理する
.. - システムの実行性能（例：処理速度、起動時間、応答時間など）
.. - リアルタイム処理の程度
.. - リソース効率（例：メモリ容量、データサイズなど）


7.4. 保守性・移植性に関する要求
--------------------------------

.. ＊各機能の将来の再利用（システム機能の独立性など）や保守（リモートメンテナンスなど）などの可能性についても整理する


7.5. セキュリティ面に関する要求
--------------------------------

.. ＊システムの要求に応じてセキュリティ（暗号化、ユーザ認証、ウィルス対策など）も考慮して整理する


8. その他
================================

.. ＊相互運用性（例：通信プロトコルなど）
.. ＊外部インタフェース要求（例：周辺システムとのインタフェース、ユーザインタフェースなど）



